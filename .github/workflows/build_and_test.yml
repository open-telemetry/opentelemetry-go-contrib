name: build_and_test
on:
  push:
    branches:
      - main
  pull_request:
env:
  TEST_RESULTS: /tmp/test-results # path to where test results will be saved
jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        go_version: [1.14, 1.15]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ${{ matrix.go_version }}
      - name: Setup Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: restore cache
        uses: actions/cache@v2.1.4
        env:
          cache-name: cache-go-mod
        with:
          path: /home/runner/go/pkg/mod
          key: go-pkg-mod-{{ checksum "go.sum" }}
      - name: Precommit and Coverage Report
        run: |
          make ci
          mkdir -p $TEST_RESULTS
          cp coverage.{txt,html} $TEST_RESULTS
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
          fail_ci_if_error: true
          verbose: true
      - name: store test output
        uses: actions/upload-artifact@v2
        with:
            name: opentelemetry-go-test-output
            path: ${{ env.TEST_RESULTS }}
  integration:
    strategy:
      matrix:
        target: [test-gocql, test-mongo-driver, test-gomemcache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: mkdir -p $TEST_RESULTS
      - name: Integration test ${{ matrix.target }}
        run: |
          make ${{ matrix.target }}
          find . -name 'coverage.html' > "${TEST_RESULTS}/coverage.lst"
          tar -n -cf - -T "${TEST_RESULTS}/coverage.lst" | tar -C "${TEST_RESULTS}" -xvf -
      - name: store test output
        uses: actions/upload-artifact@v2
        with:
            name: opentelemetry-go-contrib-test-output
            path: ${{ env.TEST_RESULTS }}
